export declare type PipeToWritableResults = {
    startWriting: () => void;
    write: (v: string) => void;
    abort: () => void;
};
export declare function renderToString<T>(fn: () => T, options?: {
    eventNames?: string[];
    nonce?: string;
}): string;
export declare function renderToStringAsync<T>(fn: () => T, options?: {
    eventNames?: string[];
    timeoutMs?: number;
    nonce?: string;
}): Promise<string>;
export declare function pipeToNodeWritable<T>(fn: () => T, writable: {
    write: (v: string) => void;
}, options?: {
    eventNames?: string[];
    nonce?: string;
    onReady?: (r: PipeToWritableResults) => void;
    onComplete?: (r: PipeToWritableResults) => void | Promise<void>;
}): void;
export declare function pipeToWritable<T>(fn: () => T, writable: WritableStream, options?: {
    eventNames?: string[];
    nonce?: string;
    onReady?: (r: PipeToWritableResults) => void;
    onComplete?: (r: PipeToWritableResults) => void | Promise<void>;
}): void;
export declare function ssr(template: string[] | string, ...nodes: any[]): {
    t: string;
};
export declare function resolveSSRNode(node: any): string;
export declare function ssrClassList(value: {
    [k: string]: boolean;
}): string;
export declare function ssrStyle(value: {
    [k: string]: string;
}): string;
export declare function ssrSpread(accessor: any): () => string;
export declare function ssrBoolean(key: string, value: boolean): string;
export declare function ssrHydrationKey(): string;
export declare function escape(html: string): string;
export declare function generateHydrationScript(): string;
